version: '3.7'

x-common-environment: &common-environment
  AWS_ACCESS_KEY_ID: admin
  AWS_SECRET_ACCESS_KEY: password
  AWS_REGION: us-east-1

networks:
   debezium-postgres-network:
       name: debezium-postgres-network
       driver: bridge
       external: false
   iceberg_net:

volumes:
  postgres_data:
  minio_data:

services:
   debezium-postgres:
       image: debezium/postgres:14-alpine
       container_name: debezium-postgres
       hostname: debezium-postgres
       restart: always
       ports:
           - '5432:5432'
       environment:
           POSTGRES_PASSWORD: password
           POSTGRES_USER: postgres
           POSTGRES_DB: bank
       networks:
           - debezium-postgres-network


   debezium-kafka:
       image: bitnami/kafka:3.4
       container_name: debezium-kafka
       hostname: debezium-kafka
       restart: always
       ports:
           - '9092:9092'
       environment:
           KAFKA_CFG_NODE_ID: 1
           KAFKA_KRAFT_CLUSTER_ID: q0k00yjQRaqWmAAAZv955w # base64 UUID
           KAFKA_CFG_PROCESS_ROLES: controller,broker
           KAFKA_CFG_LISTENERS: INTERNAL://debezium-kafka:29092,CONTROLLER://debezium-kafka:29093,EXTERNAL://0.0.0.0:9092
           KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://debezium-kafka:29092,EXTERNAL://localhost:9092
           KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
           KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@debezium-kafka:29093
           KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
           KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
       networks:
           - debezium-postgres-network


   debezium-connect:
       image: debezium/connect:2.3
       container_name: debezium-connect
       hostname: debezium-connect
       restart: always
       ports:
           - '8083:8083'
       environment:
           BOOTSTRAP_SERVERS: debezium-kafka:29092
           GROUP_ID: 1
           CONFIG_STORAGE_TOPIC: my_connect_configs
           OFFSET_STORAGE_TOPIC: my_connect_offsets
           STATUS_STORAGE_TOPIC: my_connect_statuses
           ENABLE_DEBEZIUM_SCRIPTING: 'true'
       links:
           - debezium-kafka
           - debezium-postgres
       networks:
           - debezium-postgres-network

   trino:
       image: trinodb/trino
       container_name: trino
       networks:
         iceberg_net:
       depends_on:
         - rest
         - minio
       ports:
         - 8080:8080
       volumes:
         - ./iceberg.properties:/etc/trino/catalog/iceberg.properties
       environment:
         <<: *common-environment

   rest:
       image: tabulario/iceberg-rest
       container_name: iceberg-rest
       networks:
         iceberg_net:
       depends_on:
         postgres:
           condition: service_healthy
       ports:
         - 8181:8181
       environment:
         <<: *common-environment
         CATALOG_WAREHOUSE: s3://warehouse/
         CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
         CATALOG_S3_ENDPOINT: http://minio:9000
         CATALOG_URI: jdbc:postgresql://postgres/catalog
         CATALOG_JDBC_USER: admin
         CATALOG_JDBC_PASSWORD: password

   postgres:
      image: postgres:16
      container_name: postgres
      environment:
        PGDATA: /var/lib/postgresql/data
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: password
        POSTGRES_DB: catalog
        POSTGRES_HOST_AUTH_METHOD: md5
      networks:
        iceberg_net:
      volumes:
        - postgres_data:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U admin -d catalog"]
        interval: 5s
        timeout: 5s
        retries: 5

   minio:
      image: minio/minio
      container_name: minio
      environment:
        MINIO_ROOT_USER: admin
        MINIO_ROOT_PASSWORD: password
        MINIO_DOMAIN: minio
      networks:
        iceberg_net:
          aliases:
            - warehouse.minio
      volumes:
        - minio_data:/data
      ports:
        - 9001:9001
        - 9000:9000
      command: ["server", "/data", "--console-address", ":9001"]

   mc:
      depends_on:
        - minio
      image: minio/mc
      container_name: mc
      networks:
        iceberg_net:
      environment:
        <<: *common-environment
      entrypoint: >
        /bin/sh -c "
            until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
            /usr/bin/mc mb minio/warehouse;
            /usr/bin/mc policy set public minio/warehouse;
            tail -f /dev/null
        "