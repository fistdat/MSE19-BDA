version: "3.9"

services:

  postgres:
    image: debezium/postgres:14-alpine
    container_name: postgres
    hostname: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: bank
    volumes:
      - ./postgres/psql_init.sql:/docker-entrypoint-initdb.d/psql_init.sql
    networks:
      iceberg_net:

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: q0k00yjQRaqWmAAAZv955w
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: INTERNAL://kafka:29092,CONTROLLER://kafka:29093,EXTERNAL://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      iceberg_net:

  connect:
    image: debezium/connect:2.3
    container_name: connect
    hostname: connect
    restart: always
    ports:
      - 8083:8083
    networks:
      iceberg_net:
    depends_on:
      - postgres
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: postgres_connect_configs
      OFFSET_STORAGE_TOPIC: postgres_connect_offsets
      STATUS_STORAGE_TOPIC: postgres_connect_statuses
      ENABLE_DEBEZIUM_SCRIPTING: true

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_DOMAIN: minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    entrypoint: >
      /bin/sh -c "
        until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
        /usr/bin/mc mb minio/warehouse;
        /usr/bin/mc policy set public minio/warehouse;
        tail -f /dev/null
      "

  rest:
    image: tabulario/iceberg-rest
    container_name: rest
    hostname: rest
    ports:
      - 8181:8181
    networks:
      iceberg_net:
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_PATH__STYLE__ACCESS: true

  trino:
    image: trinodb/trino
    container_name: trino
    hostname: trino
    ports:
      - 8080:8080
    networks:
      iceberg_net:
    depends_on:
      - minio
      - rest
    volumes:
      - ./trino/iceberg.properties:/etc/trino/catalog/iceberg.properties
      - ./trino/post-init.sh:/tmp/post-init.sh
      - ./trino/post-init.sql:/tmp/post-init.sql
    command:
     - "/tmp/post-init.sh"
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: us-east-1

  flink-jobmanager:
    build: ./flink
    container_name: flink-jobmanager
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - "\
        HADOOP_CLASSPATH=\
        /hadoop/share/hadoop/common/*:\
        /hadoop/share/hadoop/common/lib/*:\
        /hadoop/share/hadoop/hdfs/*:\
        /hadoop/share/hadoop/hdfs/lib/*:\
        /hadoop/share/hadoop/tools/lib/*:\
        /hadoop/share/hadoop/yarn/*:\
        /hadoop/share/hadoop/yarn/lib/*\
        "
    ports:
      - 8081:8081
    networks:
      - iceberg_net

  flink-taskmanager:
    build: ./flink
    container_name: flink-taskmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - "\
        HADOOP_CLASSPATH=\
        /hadoop/share/hadoop/common/*:\
        /hadoop/share/hadoop/common/lib/*:\
        /hadoop/share/hadoop/hdfs/*:\
        /hadoop/share/hadoop/hdfs/lib/*:\
        /hadoop/share/hadoop/tools/lib/*:\
        /hadoop/share/hadoop/yarn/*:\
        /hadoop/share/hadoop/yarn/lib/*\
        "
    depends_on:
      - flink-jobmanager
    networks:
      - iceberg_net

  flink-sql-client:
    build: ./flink
    container_name: flink-sql-client
    command: sleep infinity
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        rest.address: flink-jobmanager
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - "\
        HADOOP_CLASSPATH=\
        /hadoop/share/hadoop/common/*:\
        /hadoop/share/hadoop/common/lib/*:\
        /hadoop/share/hadoop/hdfs/*:\
        /hadoop/share/hadoop/hdfs/lib/*:\
        /hadoop/share/hadoop/tools/lib/*:\
        /hadoop/share/hadoop/yarn/*:\
        /hadoop/share/hadoop/yarn/lib/*\
        "
    depends_on:
      - flink-jobmanager
    networks:
      - iceberg_net


networks:
  iceberg_net:
